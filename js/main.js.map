{"version":3,"sources":["GameModel.js","GameView.js","GameController.js","GameInit.js"],"names":[],"mappingspufile":"main.js","sourcesContent":["\r\n\r\n\r\n    function DataBase() {\r\n\r\n        this.MAX_WRITE = 0;\r\n        this.currentIP = null;\r\n\r\n\r\n    }\r\n\r\n    DataBase.prototype.getUserData = function(loader){\r\n        \r\n        cloudDB.use.collection('users').where('realPlayer', '==', true).get()\r\n        .then(function(snapshot){\r\n            \r\n            snapshot.forEach(function(doc){\r\n                loader.startRecord.push(doc.data());\r\n            });\r\n\r\n            loader.startRecord.sort(compare); // Bubble sort\r\n        });\r\n    }\r\n\r\n    DataBase.prototype.updateLimit = function () {\r\n\r\n        this.timer = setTimeout( function limit(){\r\n\r\n            this.MAX_WRITE = 0;\r\n            this.timer = setTimeout( limit,60000);\r\n            },60000);\r\n    }\r\n\r\n    DataBase.prototype.updateUserData = function(ip,id,name,points,loader){\r\n        \r\n        if (this.MAX_WRITE >= 5) throw new Error('limit');\r\n        this.MAX_WRITE++;\r\n        this.currentIP = (ip) ? ip : 'no ip detected';\r\n\r\n        cloudDB.use.collection('users').doc(`user_${(name+id).replace(/\\s/g,'').toLowerCase()}`).set({\r\n            name: name,\r\n            points: points,\r\n            id: id.slice(1,id.length),\r\n            ip: this.currentIP,\r\n            realPlayer: true\r\n        })\r\n\r\n        // .then (function(){\r\n        //     let newResult = {name: name, points: points, id: id.slice(1,id.length)};\r\n        //     loader.startRecord.push(newResult);\r\n        //     loader.startRecord.sort(compare);\r\n        // })\r\n\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n\r\n                cloudDB.use.collection('users').where('realPlayer', '==', true)\r\n        .onSnapshot(function(snapshot){\r\n            loader.startRecord = [];\r\n            snapshot.forEach(function(doc){\r\n                loader.startRecord.push(doc.data());\r\n            });\r\n            loader.startRecord.sort(compare);\r\n        });\r\n\r\n    }\r\n\r\n    function Request() {\r\n\r\n    this.key = () => 'json';\r\n\r\n    }\r\n\r\n    Request.prototype.getIP = function (){\r\n\r\n        fetch(`https://ipsidekick.com/${this.key()}`)\r\n\r\n        .then ((response) => response.json())\r\n        .then ((response) => { (response.ip) ? localStorage.IP = response.ip : localStorage.IP = 'no detected' })\r\n\r\n        .catch(function (error){\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    function UI() {\r\n        this.linki = []; // save links\r\n        this.coordsMouseX = null;\r\n        this.coordsMouseY = null;\r\n    }\r\n\r\n    function Links(url, name, coordsX, coordsY, lengthX, lengthY) {\r\n\r\n        this.url = url;\r\n        this.Name = name;\r\n        this.pos = [coordsX, coordsY];\r\n        this.length = [lengthX, lengthY];\r\n        this.color = 'red';\r\n        this.selectColor = 'rgb(255,140,0)';\r\n        this.selectName = false;\r\n    }\r\n\r\n    UI.prototype.checkFrame = function (frame) { // check selected links\r\n\r\n        if ((this.coordsMouseX > frame.pos[0]) &&\r\n            (this.coordsMouseX < frame.pos[0] + frame.length[0]) &&\r\n            (this.coordsMouseY > frame.pos[1]) &&\r\n            (this.coordsMouseY < frame.pos[1] + frame.length[1])) {\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    function Game() {\r\n        // states\r\n        this.menu = 'menu';\r\n        this.death = 'wait';\r\n        this.rating = 'rating';\r\n        this.play = 'play';\r\n        this.startPlay = 'play-animation';\r\n        this.pauseGame = 'pause';\r\n\r\n        this.fade = 1;\r\n\r\n        this.setRequstCount = function (i) {\r\n\r\n            return this.about.requstCount = i;\r\n        };\r\n\r\n        this.about = {\r\n            state: 'loading',\r\n            count: 0, // game count for win state\r\n            stageBossCount: 0,\r\n            stageExtraBossCount: 0,\r\n            stageNumber: 0,\r\n            lastTimeBull: 0, // time bullets\r\n            requstCount: 0,\r\n        };\r\n    }\r\n\r\n    // ----------------switch states---------------\r\n\r\n    Game.prototype.startGame = function () {\r\n\r\n        return this.about.state = this.play;\r\n    };\r\n\r\n    Game.prototype.startGameAnimation = function (load, gamer, activeLink) {\r\n        // \r\n        activeLink.selectName = false;\r\n        this.music(load); // music\r\n        this.updateGameStatus(gamer, load); // game state\r\n        gamer.setHealth(200); // update health\r\n\r\n        return this.about.state = this.startPlay;\r\n    };\r\n\r\n    Game.prototype.stopGame = function () {\r\n\r\n        return this.about.state = this.death;\r\n    };\r\n\r\n    Game.prototype.ratingGame = function (activeLink) {\r\n\r\n        activeLink.selectName = false;\r\n        return this.about.state = this.rating;\r\n    };\r\n\r\n    Game.prototype.mainMenu = function (activeLink) {\r\n        \r\n        activeLink.selectName = false;\r\n        return this.about.state = this.menu;\r\n    };\r\n\r\n    Game.prototype.pause = function (activeLink) {\r\n\r\n        if ( (input.isDown(\"ESCAPE\")) || ( (activeLink) && (activeLink.selectName))) {\r\n\r\n            activeLink.selectName = false;\r\n            this.about.state = this.pauseGame;\r\n            return true;\r\n\r\n        } else {\r\n            // activeLink.selectName = false;\r\n            return false;\r\n        }\r\n    };\r\n\r\n    Game.prototype.spawnAndLvling = function (game, load, enemy, stageNumber) {\r\n        let CreateEnemy = enemy.createEnemy;\r\n        game.about.stageNumber = stageNumber;\r\n        if((game.about.stageNumber === 7)) {debugger};\r\n        if((game.about.stageNumber === 8)) {debugger};\r\n        if ((game.about.stageNumber) &&\r\n            (game.about.stageNumber === game.about.stageNumber)) {\r\n\r\n            if (game.about.stageNumber < 7) {\r\n\r\n                for (let i = 0; i < game.about.stageNumber; i++) {\r\n\r\n                    CreateEnemy(load, 75, 15, `bird_0${i}`, 'common',\r\n                        446, 100, 32, 20, 5, [0, 1, 2, 3, 4, 5], 330, 300, load.SoundsStorage[7]);\r\n                }\r\n            } else if (game.about.stageNumber >= 10) {\r\n\r\n                for (let j = 0; j < game.about.stageExtraBossCount; j++) {\r\n\r\n                    CreateEnemy(load, 225, 50, `bossExtra_0${j}`, 'bossExtra',\r\n                        964, 288, 60, 60, 2, [0, 1], 330, 300, load.SoundsStorage[8]);\r\n                }\r\n            }\r\n\r\n            if ( (game.about.stageNumber >= 7) && (game.about.stageNumber <= 15)) {\r\n\r\n                for (let i = 0; i < 5; i++) {\r\n\r\n                    CreateEnemy(load, 75, 15, `bird_0${i}`, 'common',\r\n                        446, 100, 32, 20, 5, [0, 1, 2, 3, 4, 5], 330, 300, load.SoundsStorage[7]);\r\n                }\r\n                for (let j = 0; j < game.about.stageBossCount; j++) {\r\n\r\n                    CreateEnemy(load, 175, 35, `boss_0${j}`, 'boss',\r\n                        964, 226, 60, 60, 2, [0, 1], 330, 300, load.SoundsStorage[6]);\r\n                }\r\n            } else if (game.about.stageNumber > 15){\r\n\r\n                for (let i = 0; i < game.about.stageNumber-5; i++) {\r\n\r\n                CreateEnemy(load, 225, 50, `bossExtra_0${i}`, 'bossExtra',\r\n                        964, 288, 60, 60, 2, [0, 1], 330, 300, load.SoundsStorage[8]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Game.prototype.updateGameStatus = function (gamer, load) { // new game\r\n\r\n        this.about.stageNumber = -1;\r\n        this.about,stageExtraBossCount = 1;\r\n        this.about.BossCount = -1;\r\n        this.about.count = -1;\r\n        this.fade = 2;\r\n\r\n        // update game statistic\r\n        gamer.countThrow = 0;\r\n        gamer.killCount = 0;\r\n        gamer.stat.points = 0;\r\n        gamer.SoundCount = 0;\r\n\r\n        // update items and enemys on state\r\n        load.enemy = [];\r\n        gamer.bullets = [];\r\n        load.bullets = [];\r\n        load.coins = [];\r\n        load.eat = [];\r\n\r\n        // sprite player start position\r\n        gamer.stat.sprite.size[0] = 34;\r\n        gamer.stat.sprite.pos[0] = 700;\r\n\r\n        // gamers position update\r\n        gamer.move.pos[0] = gamer.move.startPos[0];\r\n        gamer.move.pos[1] = gamer.move.startPos[1];\r\n\r\n    };\r\n\r\n    Game.prototype.music = function (load) {\r\n        load.SoundsStorage[2].currentTime = 0;\r\n        load.SoundsStorage[2].loop = true;\r\n        load.SoundsStorage[2].play();\r\n    };\r\n\r\n\r\n    function Loader() { // for storage and loading files and datas\r\n\r\n        this.loadCount = 1; // load counter\r\n\r\n        // sprite storage for game filds\r\n        this.TextureStorage = [];\r\n        this.SpriteStorage = [];\r\n        this.SoundsStorage = [];\r\n\r\n        // storage enemy and bullets\r\n        this.enemy = [];\r\n        this.bullets = [];\r\n\r\n        // items storage\r\n        this.coins = [];\r\n        this.eat = [];\r\n        this.upgrade = [];\r\n\r\n        // records storage\r\n        this.startRecord = [];\r\n    };\r\n\r\n    // ---loading method---\r\n    Loader.prototype.textureCache = function (src) {\r\n        return  this.TextureStorage.push(src);\r\n    };\r\n    Loader.prototype.SpriteCache = function (src) {\r\n        return  this.SpriteStorage.push(src);\r\n    };\r\n    Loader.prototype.SoundCache = function (src) {\r\n        return this.SoundsStorage.push(src);\r\n    };\r\n\r\n    Loader.prototype.loading = function (fileType,src,imageType) {\r\n\r\n        if ( (fileType === 'Image') && (imageType === 'texture') ){\r\n            const file = new Image();\r\n            file.src = src;\r\n            this.textureCache(file);\r\n            console.log('loading file №' + this.loadCount + '(' + file.src + ')');\r\n            this.loadCount++;\r\n        } else if ( (fileType === 'Image') && (imageType === 'sprite') ){\r\n            const file = new Image();\r\n            file.src = src;\r\n            this.SpriteCache(file);\r\n            console.log('loading file №' + this.loadCount + '(' + file.src + ')');\r\n            this.loadCount++;\r\n        }\r\n\r\n        if (fileType === 'Audio'){\r\n            const file = new Audio(); // main game music 1\r\n            file.src = src;\r\n            this.SoundCache(file); this.loadCount++;\r\n            console.log('loading file №' + this.loadCount + '(' + file.src + ')');\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    function Player(type, location) {\r\n        let _that = this;\r\n\r\n        _that.gameTime = 0; // time in game\r\n        _that.countThrow = 0;\r\n        _that.killCount = 0;\r\n        _that.SoundCount = 0;\r\n        _that.bullets = []; // player bullets\r\n\r\n            _that.stat = {\r\n\r\n                name: 'player', // type\r\n                gamerName: null, // || defult generated random name\r\n                health: 200,\r\n                points: 0,\r\n                damage: 25,\r\n                whatDrop: false,\r\n                upgradeRate: false,\r\n                sprite: new Sprite('player', type.SpriteStorage[0],\r\n                        [703, 0], [31, 34], 2, [0, 1]),\r\n                bullets: new Bullets(),\r\n            };\r\n        _that.move = {\r\n            speeds: 200,\r\n            pos: [location.settings.width / 2, location.settings.height / 2],\r\n            startPos: [385, -120], // position for start animation\r\n            animationPos: [location.settings.width / 2, location.settings.height / 2],\r\n        };\r\n\r\n        _that.setHealth = function (count) {\r\n\r\n            return this.stat.health = count;\r\n        };\r\n    }\r\n\r\n\r\n    Player.prototype.GameOver = function (gamer, game, load) {\r\n\r\n        if (gamer.stat.health <= 0) {\r\n\r\n            load.enemy = []; // cleaer enemy\r\n\r\n            if (!(gamer.SoundCount) && (game.about.stageNumber < 20)) {\r\n\r\n                load.SoundsStorage[9].play();\r\n                gamer.SoundCount++;\r\n            }\r\n            game.stopGame();\r\n        }\r\n    };\r\n\r\n    Player.prototype.Win = function (gamer, game, load) {\r\n\r\n        if (!(gamer.stat.health < 0)) {\r\n\r\n            if (!(load.enemy.length) && !(game.about.count)) {\r\n\r\n                game.about.stageNumber++;\r\n                game.about.count++;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    function Bullets() {\r\n        _thatBullets = this;\r\n        _thatBullets.lastFire = 0;\r\n        _thatBullets.i = 50;\r\n        _thatBullets.weapons = {\r\n            speed: 320,\r\n            active: false,\r\n        };\r\n\r\n\r\n        _thatBullets.useSkill = (load, gamer, ui) => {\r\n            \r\n            if (Date.now() - _thatBullets.lastFire > 200) { // delay\r\n\r\n                gamer.countThrow++; // counter\r\n\r\n                load.bullets.push({\r\n                    pos: {\r\n                        x: gamer.move.pos[0],\r\n                        y: gamer.move.pos[1]\r\n                    },\r\n                    direction: new Vector(ui.coorddX, ui.coorddY).normalize(),\r\n                    degree: 0,\r\n                    sprite: _thatBullets.createBullets(load), // bullets sprite\r\n                    siz: [15, 32], // sprite size\r\n                });\r\n\r\n                load.SoundsStorage[1].currentTime = 0;\r\n                load.SoundsStorage[1].play();\r\n\r\n                _thatBullets.lastFire = Date.now();\r\n\r\n\r\n                return _thatBullets.weapons.active = true;\r\n            }\r\n        };\r\n    };\r\n\r\n    Bullets.prototype.createBullets = function (type) {\r\n\r\n        // bull for player\r\n        return new Sprite('bull', type.SpriteStorage[0],\r\n            [192.5, 31], [32, 36], 0);\r\n    };\r\n\r\n    Bullets.prototype.createBulletsCustom = function (type, spriteCoordX, spriteCoordY) {\r\n\r\n        // bull for enemys\r\n        return new Sprite('bull2', type.SpriteStorage[0],\r\n            [spriteCoordX, spriteCoordY], [22, 34], 0);\r\n    };\r\n\r\n    function Enemy() {\r\n\r\n        let _that = this;\r\n\r\n        _that.enemySpeedX = 1 * getRandomPull(); // start random position X\r\n        _that.enemySpeedY = 1 * getRandomPull(); // start random position X\r\n        _that.DeathTimer = null;\r\n\r\n        _that.stat = {\r\n            name: '',\r\n            type: '',\r\n            collision: false,\r\n            getDmg: false,\r\n            health: null,\r\n            damage: null,\r\n            sprite: null, // for sprite\r\n            sizes: [32, 20], // sprite size\r\n            onDeath: false,\r\n        };\r\n\r\n        _that.bull = {\r\n            bullStorage: [], // enemys bulls \r\n            speed: null,\r\n            speedY: null,\r\n            pos: [0, 0],\r\n            on: false, // active || not active\r\n            lastBull: null, // delay\r\n        }\r\n\r\n        _that.move = {\r\n            speeds: 10, // bullets enemys speed\r\n            pos: [0, 0], // bullets position\r\n            randomMove: getRandomPull(), // random flight\r\n        };\r\n    }\r\n\r\n    Enemy.prototype.createEnemy = function (load, hp, damage, name, type,\r\n                                            spriteX, spriteY, spriteW, spriteH,\r\n                                            frameCount, frameGo, posX, posY, music) {\r\n\r\n        let spriteEnemy = new Enemy(load, this, hp, damage, name,\r\n                                    type, spriteX, spriteY, spriteW, spriteH,\r\n                                    frameCount, frameGo, music);\r\n\r\n        spriteEnemy.stat.name = name;\r\n        spriteEnemy.stat.type = type;\r\n        spriteEnemy.stat.health = hp;\r\n        spriteEnemy.stat.damage = damage;\r\n        spriteEnemy.move.pos[0] = posX * getRandom();\r\n        spriteEnemy.move.pos[1] = posY * getRandom();\r\n        spriteEnemy.sound = music;\r\n\r\n\r\n        if ((spriteEnemy.stat.type === 'boss' || spriteEnemy.stat.type === 'bossExtra') &&\r\n            (spriteEnemy.enemySpeedY < 0)) {\r\n\r\n            spriteX = 452;\r\n        }\r\n\r\n        if ((spriteEnemy.stat.type === 'boss' || spriteEnemy.stat.type === 'bossExtra') &&\r\n        (spriteEnemy.enemySpeedY > 0)) {\r\n\r\n            spriteX = 964;\r\n        }\r\n\r\n        spriteEnemy.stat.sprite = new Sprite('enemy', load.SpriteStorage[0],\r\n            [spriteX, spriteY], [spriteW, spriteH],\r\n            frameCount, frameGo);\r\n\r\n        load.enemy.push(spriteEnemy);\r\n    };\r\n\r\n    function Sprite(name, url, pos, size, speed, frames, dir, once) {\r\n\r\n        this.Saveframes = null;\r\n        this.name = name;\r\n        this.pos = pos;\r\n        this.size = size; // size one frame\r\n        this.speed = speed; // animation speed\r\n        this.frames = frames; //  array animation frame from start to end\r\n        this.index = 0;\r\n        this.url = url; // путь к изображению\r\n        this.dir = dir || 'horizontal'; // what dir moving on sprite map\r\n        this.once = once; // once:true if need one cycle animation\r\n        this.x = null;\r\n        this.y = null;\r\n    };\r\n\r\n    Sprite.prototype.update = function (time) {\r\n\r\n        this.index += this.speed * time;\r\n    };\r\n\r\n    Sprite.prototype.render = function () {\r\n        let frame;\r\n\r\n        if (this.speed > 0) {\r\n\r\n            let max = this.frames.length;\r\n            let idx;\r\n            \r\n            if (this.index) {\r\n\r\n                idx = Math.floor(this.index);\r\n            }\r\n\r\n            frame = this.frames[idx % max];\r\n\r\n            if (this.once && idx >= max) {\r\n\r\n                this.once = true;\r\n                return;\r\n            }\r\n        } else {\r\n\r\n            frame = 0;\r\n        }\r\n\r\n        this.x = this.pos[0];\r\n        this.y = this.pos[1];\r\n        this.Saveframes = frame;\r\n        \r\n\r\n        if (this.dir === 'vertical') {\r\n\r\n            return this.y += frame * this.size[1];\r\n        } else {\r\n\r\n            return this.x += frame * this.size[0];\r\n        }\r\n    };\r\n\r\n    function Items() {\r\n\r\n        let _that = this;\r\n\r\n        this.name = null;\r\n        this.sprite = null;\r\n        this.pos = [];\r\n        this.lucky = (percent) => {\r\n            return Math.random() < percent\r\n        }\r\n\r\n        this.settingsItems = {\r\n\r\n            get name() { // get items name\r\n                return _that.name;\r\n            },\r\n            set name(valueName) { // set items name\r\n                return _that.name = valueName;\r\n            },\r\n\r\n            get sprite() { // get item sprite\r\n                return _that.sprite;\r\n            },\r\n        }\r\n    }\r\n\r\n    Items.prototype.setSprite = function (load, cordSpriteX, cordsSpriteY,\r\n        sizeSpriteX, sizeSpriteY){\r\n\r\n        return this.sprite = new Sprite(this.name, load.SpriteStorage[0],\r\n            [cordSpriteX, cordsSpriteY], [sizeSpriteX, sizeSpriteY]);\r\n    }\r\n\r\n\r\n    function Vector(x, y) {\r\n\r\n        let _that = this;\r\n\r\n        /* текущие координаты */\r\n\t\tthis.x = x || 0; \r\n        this.y = y || 0;\r\n\r\n    }\r\n\r\n    Vector.prototype.multiply = function (vector) {\r\n\r\n\t\treturn new Vector(this.x * vector, this.y * vector);\r\n    }\r\n\r\n    Vector.prototype.add = function (vector)  {\r\n\r\n        /* прибавляю найденные координаты к координатам объекта*/\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    Vector.prototype.divide = function (vector)  {\r\n        return new Vector(this.x / vector, this.y / vector);\r\n    }\r\n\r\n    Vector.prototype.normalize = function (vector)  {\r\n\r\n        /*\r\n        нормализую вектор\r\n        (преобразование заданного вектора в вектор\r\n        в том же направлении, но с единичной длиной)\r\n        */\r\n        return this.divide(this.length())\r\n    }\r\n\r\n    Vector.prototype.length = function (vector)  {\r\n\r\n        /*  длина вектора  */\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n\r\n    Vector.prototype.dot = function (vector)  {\r\n        /* Скалярное произведение векторов в 2D пространстве */\r\n        return this.x * vector.x + this.y * vector.y;\r\n    }\r\n\r\n\r\n    function update(time, gamer, load, game, link) {\r\n\r\n        gamer.gameTime += time; // game time\r\n        // ---start game---\r\n       if ( (game.about.state === 'play-animation') && (game.fade <=0)) { animationMoving(gamer, game,time) };\r\n\r\n        if ((game.about.state === 'play') || // check win and gameOver\r\n            (game.about.state === 'wait')) {\r\n\r\n            gamer.GameOver(gamer, game, load);\r\n            gamer.Win(gamer, game, load);\r\n\r\n        }\r\n        // link[5]\r\n        if ((!(game.pause(link[5]))) && (game.about.state !== 'pause') &&\r\n            ((game.about.state !== 'menu') && (game.about.state !== 'rating'))) { // if game state play\r\n\r\n            inputs(time, gamer); // check inputs\r\n            updateCreeps(time, gamer, load, game); // check enemys and update player/enemy sprite\r\n            updateBulls(time, gamer, load); // check bullets\r\n            checkShot(load, gamer); // check shot\r\n            checkItem(load, gamer); // drop items\r\n            damageCheck(load, gamer); // get damage check\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function damageCheck(load, gamer) {\r\n\r\n        let resetSprite; // timer for splice items\r\n\r\n        load.enemy.forEach((itemEnemy,i,arrayEnemy) => { // check all enemys\r\n      \r\n            if (itemEnemy.stat.health <= 0) {\r\n\r\n                \r\n                if ( (itemEnemy.stat.onDeath === false)){\r\n\r\n                itemEnemy.stat.onDeath = true;\r\n                gamer.stat.whatDrop = Math.random() < 0.5;\r\n                gamer.stat.upgradeRate = Math.random() < 0.05;\r\n\r\n                deathEnemyUpdate(itemEnemy);\r\n\r\n                if(itemEnemy.stat.type === 'common'){\r\n\r\n                itemEnemy.stat.sprite.pos[0] = 960;\r\n                itemEnemy.stat.sprite.pos[1] = 102;\r\n                }\r\n\r\n                if(itemEnemy.stat.type === 'boss'){\r\n                    \r\n                    itemEnemy.stat.sprite.pos[0] = 1540;\r\n                    itemEnemy.stat.sprite.pos[1] = 232;\r\n                    itemEnemy.stat.sprite.frames = [0,1,2];\r\n                }\r\n\r\n                if(itemEnemy.stat.type === 'bossExtra'){\r\n\r\n                    itemEnemy.stat.sprite.pos[0] = 1542;\r\n                    itemEnemy.stat.sprite.pos[1] = 298;\r\n                    itemEnemy.stat.sprite.frames = [0,1,2];\r\n                }\r\n\r\n                if (gamer.stat.whatDrop) { // drops\r\n\r\n                    coins = new Items();\r\n                    coins.settingsItems.name = 'coin';\r\n\r\n                    if (coins.lucky(0.7)) { // drop coins\r\n\r\n                        coins.setSprite(load, 69, 30, 26, 37);\r\n                        // coins position\r\n                        coins.pos[0] = itemEnemy.move.pos[0];\r\n                        coins.pos[1] = itemEnemy.move.pos[1];\r\n\r\n                        load.coins.push(coins);\r\n                    } else {\r\n\r\n                        delete coins;\r\n                    }\r\n                } else {\r\n\r\n                    eat = new Items();\r\n                    eat.settingsItems.name = 'eat';\r\n\r\n                    if (eat.lucky(0.5)) { // drop eats\r\n\r\n                        eat.setSprite(load, 95, 30, 39, 40);\r\n                        // eat position\r\n                        eat.pos[0] = itemEnemy.move.pos[0];\r\n                        eat.pos[1] = itemEnemy.move.pos[1];\r\n\r\n                        load.eat.push(eat);\r\n                    } else {\r\n\r\n                        delete eat;\r\n                    }\r\n                }\r\n\r\n                if(gamer.stat.upgradeRate){\r\n\r\n                    upgrade = new Items();\r\n                    upgrade.settingsItems.name = 'scroll';\r\n\r\n                    upgrade.setSprite(load, 128, 192, 42, 44);\r\n\r\n                    upgrade.pos[0] = itemEnemy.move.pos[0]+5;\r\n                    upgrade.pos[1] = itemEnemy.move.pos[1]+5;\r\n\r\n                    load.upgrade.push(upgrade);\r\n                }\r\n\r\n\r\n                // -----------collision-----------\r\n\r\n                gamer.killCount++;\r\n                itemEnemy.sound.currentTime = 0;\r\n                itemEnemy.sound.play();\r\n\r\n            } \r\n\r\n            if(itemEnemy.stat.sprite.index >= itemEnemy.stat.sprite.frames.length) {\r\n                itemEnemy.DeathTimer = null;\r\n                arrayEnemy.splice(i, 1);\r\n                gamer.stat.points += 25;\r\n            }\r\n            }\r\n\r\n            checkPlayerDmg(itemEnemy,gamer,load);\r\n\r\n        });\r\n    }\r\n\r\n    function checkPlayerDmg(itemEnemy,gamer,load) {\r\n        if ((itemEnemy) &&(boxCollides([itemEnemy.move.pos[0], itemEnemy.move.pos[1]],\r\n            [30, 30],[gamer.move.pos[0], gamer.move.pos[1]], [32, 32]))){\r\n\r\n        if (gamer.stat.health > -1) {\r\n\r\n            gamer.stat.sprite.pos[0] = 956; // damage player sprite\r\n            load.SoundsStorage[5].play();\r\n            gamer.stat.health--; // get damage\r\n\r\n            gamer.move.pos[0, 1]++; // repulsion\r\n\r\n            resetSprite = setTimeout(() => {\r\n                // start animation player frame\r\n                gamer.stat.sprite.pos[0] = 700;\r\n            }, 0);\r\n        } else {\r\n\r\n            gamer.stat.health = 0;\r\n        }\r\n        }\r\n    }\r\n\r\n    function deathEnemyUpdate(itemEnemy){\r\n\r\n        itemEnemy.stat.sprite.once = true;\r\n        itemEnemy.stat.sprite.speed = 10;\r\n        itemEnemy.stat.sprite.index = 0;\r\n        itemEnemy.stat.sprite.Saveframes = 0;\r\n\r\n        itemEnemy.enemySpeedX = 0;\r\n        itemEnemy.enemySpeedY = 0;\r\n\r\n        itemEnemy.bull.on = false;\r\n        itemEnemy.bull.bullStorage = [];\r\n    }\r\n\r\n    function updateCreeps(time, gamer, load, game) {\r\n\r\n        gamer.stat.sprite.update(time); // update player sprite\r\n\r\n        if (Date.now() - game.about.lastTimeBull > 10) { // delay\r\n\r\n            load.enemy.forEach((item) => {\r\n\r\n                let bulPosX = item.bull.pos[0]; // get bullets pos x\r\n                let bulPosY = item.bull.pos[1]; // get bullets pos y\r\n\r\n                let gamerPosX = gamer.move.pos[0]; // get player pos x\r\n                let gamerPosY = gamer.move.pos[1]; // get player pos y\r\n\r\n                item.stat.sprite.update(time);\r\n\r\n                if ((item.bull.bullStorage.length) &&\r\n                    ((item.bull.pos[0] <= 40) || (item.bull.pos[0] > 755) ||\r\n                    (item.bull.pos[1] < 60) || (item.bull.pos[1] > 440))) {\r\n\r\n                    // delete bullets\r\n                    item.bull.bullStorage.splice(0, 1);\r\n                    item.bull.pos[0] = item.move.pos[0];\r\n                    item.bull.pos[1] = item.move.pos[1];\r\n                    return;\r\n                }\r\n                // -------Create bullets sprite-------\r\n                if (!(item.bull.bullStorage.length)) {\r\n                    let bullEnemy;\r\n\r\n                    if (item.stat.type === `boss`) {\r\n\r\n                        bullEnemy = new Sprite('bull2', load.SpriteStorage[0],\r\n                            [192, 2], [30, 30], 0);\r\n                    }\r\n\r\n                    if (item.stat.type === `bossExtra`) {\r\n\r\n                        bullEnemy = new Sprite('bull2', load.SpriteStorage[0],\r\n                            [354, 2], [30, 30], 0);\r\n                    }\r\n\r\n                    if (item.stat.type === `common`) {\r\n\r\n                        bullEnemy = new Sprite('bull2', load.SpriteStorage[0],\r\n                            [324, 0], [30, 30], 0);\r\n                    }\r\n\r\n                    item.bull.bullStorage.push(bullEnemy); // bullets storage\r\n                    item.bull.speed = 150; // set bullets speed x\r\n                    item.bull.speedY = 150; // set bullets speed y\r\n                    item.bull.speed *= getRandomPull(); // set random dir move bullets\r\n                }\r\n\r\n                item.bull.pos[0] += item.bull.speed * time; // move x\r\n                item.bull.pos[1] += item.bull.speedY * time; // move y\r\n                item.bull.on = 'true'; // shot on\r\n\r\n                // ------collision enemy bullets with player------\r\n                if ((boxCollides([bulPosX, bulPosY], [30, 30],\r\n                                [gamerPosX, gamerPosY], [32, 32]))) {\r\n\r\n                    load.SoundsStorage[5].currentTime = 0;\r\n                    load.SoundsStorage[5].play();\r\n                    gamer.stat.health--;\r\n                    gamer.move.pos[0, 1]++;\r\n\r\n                    // set start sprite frame\r\n                    resetSprite = setTimeout(() => {\r\n\r\n                        gamer.stat.sprite.pos[0] = 700;\r\n                    }, 0);\r\n                }\r\n\r\n                // ------pushing and set sprite frames away from the walls------\r\n\r\n                // ---change dir moving---\r\n\r\n                dirMovingEnemy(item);\r\n\r\n                item.move.pos[0] += item.enemySpeedX; // moving enemy x\r\n                item.move.pos[1] += item.enemySpeedY; // moving enemy y\r\n            });\r\n\r\n            game.about.lastTimeBull = Date.now(); // delay\r\n        }\r\n    }\r\n\r\n    function dirMovingEnemy(item){\r\n\r\n        if ((item) && (item.move.pos[0] > 700)) {\r\n\r\n            item.enemySpeedX *= -1;\r\n\r\n            // ---set sprite frames---\r\n            (item.stat.type === 'boss' || item.stat.type === 'bossExtra') &&\r\n                                            (item.stat.sprite.pos[0] = 1226);\r\n\r\n        }\r\n\r\n        // ---change dir moving---\r\n        if ((item) && (item.move.pos[0] < 70)){\r\n\r\n            item.enemySpeedX *= -1;\r\n\r\n            // ---set sprite frames---\r\n            (item.stat.type === 'boss' || item.stat.type === 'bossExtra') &&\r\n                                            (item.stat.sprite.pos[0] = 712);\r\n        }\r\n\r\n        // ---change dir moving---\r\n        if ((item) && (item.move.pos[1] < 70)) {\r\n\r\n            item.enemySpeedY *= -1; // change dir moving\r\n\r\n            // ---set sprite frames---\r\n            if((item.stat.type === 'boss') || (item.stat.type === 'bossExtra')){\r\n                \r\n                item.stat.sprite.pos[0] = 964;\r\n            }\r\n        }\r\n\r\n        // ---change dir moving---\r\n        if ((item) && (item.move.pos[1] > 400)) {\r\n\r\n            item.enemySpeedY *= -1; // change dir moving\r\n\r\n            // ---set sprite frames---\r\n            if ((item.stat.type === 'boss') || (item.stat.type === 'bossExtra')){\r\n                \r\n                item.stat.sprite.pos[0] = 452;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function updateBulls(time, gamer, load) {\r\n\r\n\r\n        load.bullets.forEach((item,i,array) =>{\r\n\r\n            let bull = item; // short write\r\n\r\n            // ------ bullets gamer move dir ------\r\n\r\n            calcBullet(item, gamer, time);\r\n\r\n            if (bull.pos.y < 50 || bull.pos.y > 440 ||\r\n                bull.pos.x > 727 || bull.pos.x < 35) {\r\n\r\n                // if bullets left valid dir\r\n                array.splice(i, 1);\r\n                i--;\r\n            }\r\n            });\r\n    }\r\n\r\n    function calcBullet(bullet, gamer, time) {\r\n        // преобразуем координаты в объект класса Vector\r\n\r\n        const pos = new Vector(bullet.pos.x, bullet.pos.y);\r\n\r\n        // рассчитываем вектор приращения в направлении движения пули для ее скорости\r\n        const vector = bullet.direction.multiply(gamer.stat.bullets.weapons.speed * time);\r\n\r\n        // добавляем к координатам пули значение вектора с приращениями\r\n        bullet.pos = pos.add(vector);\r\n    }\r\n\r\n    function getName(buttonName, gamer) {\r\n\r\n        // get gamer name from localStorage and set\r\n        localStorage.name = buttonName;\r\n        return gamer.stat.gamerName = buttonName;\r\n    }\r\n\r\n\r\n    function collides(x, y, r, b, x2, y2, r2, b2) {\r\n\r\n        // check collisions\r\n        return !(r <= x2 || x > r2 ||\r\n            b <= y2 || y > b2);\r\n    }\r\n\r\n    function boxCollides(pos, size, pos2, size2) {\r\n\r\n        // check collisions\r\n        return collides(pos[0], pos[1],\r\n            pos[0] + size[0],\r\n            pos[1] + size[1],\r\n            pos2[0], pos2[1],\r\n            pos2[0] + size2[0],\r\n            pos2[1] + size2[1]);\r\n    }\r\n\r\n    function checkShot(load, gamer) { // get plater damage or no\r\n\r\n        //---auxiliary variables---\r\n        let posBull = [];\r\n        let enemyPos = [];\r\n        let prewFrameSprite = null;\r\n        let prewFrameCount = null;\r\n        let resetTimeout = null;\r\n\r\n\r\n            load.bullets.forEach( (itemBull,i) => {\r\n\r\n                posBull[0] = itemBull.pos.x;\r\n                posBull[1] = itemBull.pos.y;\r\n\r\n                load.enemy.forEach( (itemEnemy) => {\r\n\r\n                    enemyPos[0] = itemEnemy.move.pos[0];\r\n                    enemyPos[1] = itemEnemy.move.pos[1];\r\n\r\n                    if (boxCollides(enemyPos, [35, 35], posBull, [35, 35]) && \r\n                    (itemEnemy.stat.health >= 0)) {\r\n                        // if (itemEnemy.stat.type === 'common') {\r\n\r\n                        //     prewFrameSprite = itemEnemy.stat.sprite.pos[0];\r\n                        //     prewFrameCount = itemEnemy.stat.sprite.frames;\r\n                        //     itemEnemy.stat.sprite.pos[0] = 960;\r\n                        //     itemEnemy.stat.sprite.Saveframes = 0;\r\n                        //     resetTimeout = setTimeout(()=>{\r\n                        //         itemEnemy.stat.sprite.pos[0] = prewFrameSprite;\r\n                        //         itemEnemy.stat.sprite.frames = prewFrameCount;\r\n                        //     },50);\r\n                        //     }\r\n\r\n                        itemEnemy.stat.health -= gamer.stat.damage;\r\n                        load.bullets.splice(i, 1);\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    function checkItem(load, gamer) { // player came on items or no\r\n\r\n        //---auxiliary variables---\r\n        let posItem = [];\r\n        let posGamer = [];\r\n        let timerDelete = null; // timer for delte unactive items\r\n\r\n\r\n            load.coins.forEach((item,i,array) =>{\r\n\r\n                posItem[0] = item.pos[0]; // coins position x\r\n                posItem[1] = item.pos[1]; // coins position y\r\n\r\n                posGamer[0] = gamer.move.pos[0]; // gamer position x\r\n                posGamer[1] = gamer.move.pos[1]; // gamer position y\r\n\r\n                if (boxCollides(posGamer, [26, 26], posItem, [26, 26])) {\r\n\r\n                    load.SoundsStorage[3].currentTime = 0;\r\n                    load.SoundsStorage[3].play();\r\n                    gamer.stat.points += 10;\r\n                    array.splice(i, 1);\r\n                }\r\n            });\r\n\r\n            load.eat.forEach( (item,i,array) => {\r\n\r\n                posItem[0] = item.pos[0]; // eat position x\r\n                posItem[1] = item.pos[1]; // eat position y\r\n\r\n                posGamer[0] = gamer.move.pos[0]; // gamer position x\r\n                posGamer[1] = gamer.move.pos[1]; // gamer position y\r\n\r\n                if (boxCollides(posGamer, [26, 26], posItem, [26, 26])) {\r\n\r\n                    if ((gamer.stat.health < 200) &&\r\n                        ((gamer.stat.health + (gamer.stat.health * 0.20) < 200))) {\r\n\r\n                        load.SoundsStorage[4].currentTime = 0;\r\n                        load.SoundsStorage[4].play();\r\n                        gamer.stat.health += Math.floor(200 * 0.16);\r\n                        array.splice(i, 1);\r\n\r\n                    } else timerDelete = setTimeout(() => {\r\n                        array.splice(i, 1);\r\n                    }, 2000);\r\n                }\r\n            });\r\n\r\n            load.upgrade.forEach( (item,i,array) => {\r\n\r\n                posItem[0] = item.pos[0]; // eat position x\r\n                posItem[1] = item.pos[1]; // eat position y\r\n\r\n                posGamer[0] = gamer.move.pos[0]; // gamer position x\r\n                posGamer[1] = gamer.move.pos[1]; // gamer position y\r\n\r\n                if (boxCollides(posGamer, [30, 30], posItem, [30, 30])) {\r\n\r\n                    load.SoundsStorage[11].currentTime = 0;\r\n                    load.SoundsStorage[11].play();\r\n                    gamer.stat.damage += 5;\r\n                    array.splice(i, 1);\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n\r\n    function calculate(gamer, game) {\r\n        // -----calculate player position-----\r\n\r\n        if ((game.about.state = 'play')) {\r\n\r\n            (gamer.move.pos[0] <= 35) && (gamer.move.pos[0] = 35);\r\n\r\n            (gamer.move.pos[0] >= 727) && (gamer.move.pos[0] = 727);\r\n\r\n            (gamer.move.pos[1] <= 55) && (gamer.move.pos[1] = 55);\r\n\r\n            (gamer.move.pos[1] >= 440) && (gamer.move.pos[1] = 440);\r\n\r\n        }\r\n    }\r\n\r\n    function animationMoving(gamer, game,time) {\r\n        // -----start game animation-----\r\n\r\n        if (gamer.move.animationPos[1] >= gamer.move.pos[1]) {\r\n\r\n            gamer.move.pos[1] += gamer.move.speeds*time;\r\n        } else {\r\n\r\n            // set state\r\n            game.about.state = 'play';\r\n        }\r\n    }\r\n\r\n    function inputs(time, gamer) {\r\n        // -----player moving-----\r\n\r\n        if (input.isDown('RIGHT') === true) {\r\n\r\n            gamer.stat.sprite.size[0] = 34;\r\n            gamer.stat.sprite.pos[0] = 572.1;\r\n            gamer.move.pos[0] += gamer.move.speeds*time;\r\n        }\r\n        if (input.isDown('LEFT') === true) {\r\n\r\n            gamer.stat.sprite.size[0] = 33;\r\n            gamer.stat.sprite.pos[0] = 828;\r\n            gamer.stat.sprite.frames = [0, 1];\r\n            gamer.move.pos[0] -= gamer.move.speeds*time;\r\n        }\r\n        if (input.isDown('UP') === true) {\r\n\r\n            gamer.stat.sprite.size[0] = 34;\r\n            gamer.stat.sprite.pos[0] = 444;\r\n            gamer.move.pos[1] -= gamer.move.speeds*time;\r\n        }\r\n        if (input.isDown('DOWN') === true) {\r\n\r\n            gamer.stat.sprite.size[0] = 34;\r\n            gamer.stat.sprite.pos[0] = 700;\r\n            gamer.move.pos[1] += gamer.move.speeds*time;\r\n        }\r\n        if ((input.isDown('UP') === true) && (input.isDown('RIGHT') === true)) {\r\n\r\n            gamer.stat.sprite.size[0] = 33;\r\n            gamer.stat.sprite.pos[0] = 510;\r\n        } else\r\n        if ((input.isDown('UP') === true) && (input.isDown('LEFT') === true)) {\r\n\r\n            gamer.stat.sprite.size[0] = 34;\r\n            gamer.stat.sprite.pos[0] = 891;\r\n        }\r\n\r\n        if ((input.isDown('DOWN') === true) && (input.isDown('LEFT') === true)) {\r\n\r\n            gamer.stat.sprite.size[0] = 33;\r\n            gamer.stat.sprite.pos[0] = 766;\r\n        } else\r\n        if ((input.isDown('DOWN') === true) && (input.isDown('RIGHT') === true)) {\r\n\r\n            gamer.stat.sprite.size[0] = 33;\r\n            gamer.stat.sprite.pos[0] = 636.5;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function getRandom() {\r\n        // -----get random enemy position-----\r\n        let arr = [0.3, 0.6, 0.8, 0.9, 1.2];\r\n        let rand = Math.floor(Math.random() * arr.length);\r\n        return arr[rand];\r\n    }\r\n\r\n    function getRandomPull() {\r\n        // -----get random bullets dir-----\r\n        let arr = [-1.2, -1, 1, 1.2];\r\n        let rand = Math.floor(Math.random() * arr.length);\r\n        return arr[rand];\r\n    }\r\n\r\n    function compare(a, b) {\r\n        // bubble sort records list\r\n        if (a.points < b.points) {\r\n\r\n            return -1;\r\n        }\r\n        if (a.points > b.points) {\r\n\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }","\r\n    function Draw() {\r\n        let _that = this;\r\n\r\n        this.blink = 1;\r\n        this.frameBlink = true;\r\n        this.view = 'xl';\r\n        this.viewMode = 'full';\r\n        this.viewDesktop = 'none';\r\n\r\n        _that.settings = {\r\n            width: _that.width(), // canvas w\r\n            height: _that.height(), // canvas h\r\n            textureW: _that.width(), // texture weight\r\n            textureH: _that.height(), // texture weight\r\n            openGate: 0, // end gate possition\r\n            countModal: 0, // counter modal window in game\r\n            drawInX: 0, // position X to draw in main ctx\r\n            drawInY: 0,  // position Y to draw in main ctx\r\n            mouse: 0\r\n        };\r\n\r\n        _that.bullets = {\r\n            //---for player---\r\n            spriteListBulletsPosition: [106,0],\r\n            spritePlayerSizeW: 14,\r\n            spritePlayerSizeH: 32,\r\n        };\r\n\r\n        _that.items = {\r\n            spriteItemSize: [15,15]\r\n        };\r\n\r\n        _that.pause = {\r\n            RectPause: [this.settings.width/6,40],\r\n            RectPauseSize: [this.settings.width/1.5,this.settings.height/1.4],\r\n            TextStageName: [this.settings.width/2.1,100],\r\n            Notification: [this.settings.width/2,135],\r\n            Menu: [this.settings.width/2.1,450]\r\n        }\r\n\r\n        _that.menu = {\r\n            background: null,\r\n            TitleGame: [this.settings.width/2,100],\r\n            play: [this.settings.width/2,this.settings.height/2.5],\r\n            rating: [this.settings.width/2,this.settings.height/1.8],\r\n            myName: [40,this.settings.height-20],\r\n            version: [this.settings.width-40,this.settings.height-20]\r\n        }\r\n\r\n        _that.rating = {\r\n            TitleGame: [this.settings.width/2,50],\r\n            return: [this.settings.width/2,165],\r\n            StrokeRectCoords: [this.settings.width/9.4,200],\r\n            StrokeRectSize: [this.settings.width/1.3,350],\r\n            RectCoords: [this.settings.width/9.4,200],\r\n            RectSize: [this.settings.width/1.3,350],\r\n            TitleName: [this.settings.width/8,235],\r\n            TitlePoints: [this.settings.width/1.45,235],\r\n            ratingListX: [this.settings.width/8,this.settings.height-50],\r\n            ratingListPointsX: [this.settings.width/8,this.settings.height-50]\r\n        }\r\n\r\n        _that.gameOver = {\r\n            TitleCoords: [this.settings.width/2,100],\r\n            win: [this.settings.width/2,100],\r\n            Points: [this.settings.width/2,150],\r\n            Throw: [this.settings.width/2,200],\r\n            killCount: [this.settings.width/2,250],\r\n            menu: [this.settings.width/2.02,450]\r\n        }\r\n\r\n        _that.playGame = {\r\n            spriteTextureBorder: [5,610],\r\n            spriteTexture: [5,5],\r\n            gamePanelCoords: [0, 542],\r\n            gamePanelSize: [this.settings.width, 80],\r\n            hpTextPosition: [this.settings.width/3, 588],\r\n            hpBarSize: [375, 588],\r\n            hpBarBoorderCoords: [this.settings.width/2.7, 570],\r\n            hpBarBoorderSize: [204, 25],\r\n            PointsCoords: [-12, 20],\r\n            PointsSize: [45,45],\r\n            PointsGetCoords: [0, 560],\r\n            PointsGetSize: [35, 35],\r\n            PointsTextCoords: [40, 592],\r\n            ModalTextWASD: [this.settings.width/2,35],\r\n            ModalPress: [this.settings.width/2,65],\r\n            Audio: [this.settings.width,460],\r\n            pauseButton: [this.settings.width-40,this.settings.height-48],\r\n        }\r\n\r\n        _that.loading = {\r\n            loadingText: [this.settings.width/4.7,this.settings.height/2]\r\n        }\r\n\r\n\r\n\r\n        _that.drawBuffer = {canvasBuffer: null, ctxBuffer: null }; // buffer canvas\r\n        _that.getCanvas = {canvas: document.getElementById('arena'), }; // get canvas in app\r\n        _that.getCtx = { ctx: _that.getCanvas.canvas.getContext('2d'), }; // get ctx in app\r\n    }\r\n\r\n    Draw.prototype.render =  function ()  {\r\n    // -----All render-----\r\n\r\n    \r\n\r\n        this.getCtx.ctx.drawImage(this.drawBuffer.canvasBuffer,\r\n                                this.settings.drawInX,this.settings.drawInY,\r\n                                this.settings.width,this.settings.height);\r\n        this.drawBuffer.ctxBuffer.restore();\r\n\r\n        return;\r\n    };\r\n\r\n    Draw.prototype.renderEnemys = function(gamer){\r\n\r\n        if(gamer.stat.name !== 'player') {\r\n\r\n            gamer.stat.sprite.x = gamer.stat.sprite.render(); // render sprite update\r\n\r\n            // HP enemys\r\n            this.drawBuffer.ctxBuffer.fillStyle = 'red';\r\n            this.drawBuffer.ctxBuffer.font = 'bold 12px Aria';\r\n            this.drawBuffer.ctxBuffer.fillText(gamer.stat.health + 'HP',\r\n                                            gamer.move.pos[0]-5,gamer.move.pos[1]-5);\r\n            // render enemys\r\n            this.drawBuffer.ctxBuffer.drawImage(gamer.stat.sprite.url,\r\n                gamer.stat.sprite.x, gamer.stat.sprite.pos[1],\r\n                gamer.stat.sprite.size[0], gamer.stat.sprite.size[1],\r\n                gamer.move.pos[0], gamer.move.pos[1],\r\n                gamer.stat.sprite.size[1],gamer.stat.sprite.size[1]);\r\n\r\n            }\r\n\r\n        return;\r\n    }\r\n\r\n    Draw.prototype.renderItems = function(load){\r\n\r\n\r\n            load.coins.forEach( (item) => {\r\n\r\n                if(item.lucky){\r\n                    item.sprite.x = item.sprite.render(); // render sprite coins\r\n                // render coins\r\n                    this.drawBuffer.ctxBuffer.drawImage(item.settingsItems.sprite.url,\r\n                                                        item.sprite.x, item.sprite.pos[1],\r\n                                                        item.sprite.size[0], item.sprite.size[1],\r\n                                                        item.pos[0],item.pos[1],\r\n                                                        this.items.spriteItemSize[0],\r\n                                                        this.items.spriteItemSize[1]);\r\n                }\r\n            });\r\n\r\n        load.eat.forEach((item) => {\r\n\r\n                if(item.lucky){\r\n\r\n                    item.sprite.x = item.sprite.render(); // render sprite eat\r\n                    this.drawBuffer.ctxBuffer.drawImage(item.settingsItems.sprite.url,\r\n                                                        item.sprite.x, item.sprite.pos[1],\r\n                                                        item.sprite.size[0], item.sprite.size[1],\r\n                                                        item.pos[0],  item.pos[1],\r\n                                                        this.items.spriteItemSize[0],\r\n                                                        this.items.spriteItemSize[1]);\r\n                }\r\n        });\r\n\r\n        load.upgrade.forEach((item) => {\r\n\r\n                if(item.lucky){\r\n\r\n                    item.sprite.x = item.sprite.render(); // render sprite eat\r\n                    this.drawBuffer.ctxBuffer.drawImage(item.settingsItems.sprite.url,\r\n                                                        item.sprite.x, item.sprite.pos[1],\r\n                                                        item.sprite.size[0], item.sprite.size[1],\r\n                                                        item.pos[0],  item.pos[1],\r\n                                                        this.items.spriteItemSize[0],\r\n                                                        this.items.spriteItemSize[1]);\r\n                }\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    Draw.prototype.renderPlayer = function (gamer,game){\r\n\r\n        if(game.fade <= 0){\r\n\r\n        gamer.stat.sprite.x = gamer.stat.sprite.render(); // update sprite player\r\n        this.drawBuffer.ctxBuffer.drawImage(gamer.stat.sprite.url,\r\n                                            gamer.stat.sprite.x, gamer.stat.sprite.pos[1],\r\n                                            gamer.stat.sprite.size[0], gamer.stat.sprite.size[1],\r\n                                            gamer.move.pos[0],gamer.move.pos[1],\r\n                                            gamer.stat.sprite.size[1],gamer.stat.sprite.size[1]);\r\n\r\n\r\n        return;\r\n        }\r\n    }\r\n\r\n    Draw.prototype.fadeIn = function(game,load){\r\n\r\n\r\n        if(game.about.state === 'play-animation' && (game.fade > 0)){\r\n\r\n        this.drawBuffer.ctxBuffer.fillStyle = 'black';\r\n        this.drawBuffer.ctxBuffer.globalAlpha = game.fade;\r\n        this.drawBuffer.ctxBuffer.drawImage(load.SpriteStorage[1],\r\n                                            this.settings.drawInX,this.settings.drawInX,\r\n                                            this.settings.width,this.settings.height);\r\n\r\n        this.drawBuffer.ctxBuffer.font = '100px Aria bold';\r\n        this.drawBuffer.ctxBuffer.fillStyle = 'grey';\r\n        this.drawBuffer.ctxBuffer.fillText('RENDER',this.loading.loadingText[0]+30,\r\n                                            this.loading.loadingText[1]);\r\n\r\n        game.fade -= 0.02;\r\n        this.drawBuffer.ctxBuffer.restore();\r\n        }\r\n    }\r\n\r\n    Draw.prototype.renderEnemyBulls = function (bull){\r\n\r\n    let bulls = bull.bull; // short write\r\n\r\n        if (bull.bull.on === 'true'){ // if bullets active\r\n\r\n            this.drawBuffer.ctxBuffer.restore(); // restove ctx\r\n        if((bulls.bullStorage.length)){\r\n\r\n            this.drawBuffer.ctxBuffer.drawImage(bull.bull.bullStorage[0].url,\r\n                                                bull.bull.bullStorage[0].pos[0],\r\n                                                bull.bull.bullStorage[0].pos[1],\r\n                                                bull.bull.bullStorage[0].size[0],\r\n                                                bull.bull.bullStorage[0].size[1],\r\n                                                bulls.pos[0],bulls.pos[1],\r\n                                                this.items.spriteItemSize[0],\r\n                                                this.items.spriteItemSize[1]);\r\n\r\n            this.render(); // render bullets\r\n            this.drawBuffer.ctxBuffer.restore(); // restove ctx\r\n        }\r\n\r\n        return;\r\n    }\r\n}\r\n\r\n    Draw.prototype.renderBulls =  function(bull,load,gamer) {\r\n    // translate and rotate for renders bullets in corect dir\r\n       \r\n        if( (load.bullets.length) ){\r\n\r\n            this.drawBuffer.ctxBuffer.setTransform(1, 0, 0, 1, 0, 0); // polyfill ResetTransform() for IE\r\n            this.drawBuffer.ctxBuffer.save();\r\n\r\n            this.drawBuffer.ctxBuffer.translate(bull.pos.x,bull.pos.y);\r\n            this.drawBuffer.ctxBuffer.rotate( (bull.degree*2) * (Math.PI / 180) );\r\n\r\n        this.drawBuffer.ctxBuffer.drawImage(bull.sprite.url,\r\n                                            bull.sprite.pos[0],\r\n                                            bull.sprite.pos[1],\r\n                                            bull.sprite.size[0], bull.sprite.size[1],\r\n                                            this.settings.drawInX,this.settings.drawInY,\r\n                                            25,27);\r\n            bull.degree++;\r\n\r\n            this.drawBuffer.ctxBuffer.restore();\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    Draw.prototype.renders = function(gamer,load,game,UserInterface) {\r\n\r\n        if ((game.about.state !== 'menu') &&\r\n            (game.about.state !== 'rating') &&\r\n            (gamer.stat.health <= 0)){ // render gameOver\r\n\r\n            gamer.GameOver(gamer,game,load);\r\n        }\r\n\r\n        (game.about.state === 'play' || game.about.state === 'play-animation') &&\r\n                                this.renderMouse(load,UserInterface);\r\n\r\n\r\n        // ---render pause menu---\r\n        ((game.about.state === 'wait') && (this.gameOverView(gamer,UserInterface,game)));\r\n        // --render rating---\r\n        ((game.about.state === 'rating') && (this.drawRatingList(load,gamer,UserInterface,gamer)));\r\n\r\n        if((game.about.state === 'play')){ //if game state play\r\n\r\n        load.enemy.forEach((item)=> { // render all enemys and items\r\n            \r\n            this.renderEnemys(item);\r\n            this.renderItems(load);\r\n        });\r\n\r\n        this.renderPlayer(gamer,game);\r\n\r\n        load.bullets.forEach((item)=>{ // render player bullets\r\n            \r\n            this.renderBulls(item,load,gamer);\r\n        });\r\n\r\n        load.enemy.forEach((item)=>{ // render enemys bullets\r\n\r\n            this.renderEnemyBulls(item);\r\n        });\r\n        }\r\n\r\n        if (game.about.state === 'play-animation'){ // render start animation state\r\n\r\n        (game.fade > 0) && (this.fadeIn(game,load));\r\n        (game.fade <= 0) && (this.renderPlayer(gamer,game));\r\n\r\n        }\r\n\r\n        this.pauseMenuView(game,gamer,UserInterface,load); // render pause menu\r\n\r\n        if(((game.about.state === 'pause') || (game.about.state === 'menu')) &&\r\n            (UserInterface.linki.length) ){\r\n\r\n            if(UserInterface.linki[0].selectName){ // link menu\r\n\r\n            game.about.state = 'menu'; // set state menu\r\n            this.DrawMenu(load,game,UserInterface); // render menu\r\n\r\n            } else\r\n            if (game.about.state === 'menu'){\r\n\r\n                this.DrawMenu(load,game,UserInterface);\r\n            }\r\n        }\r\n        this.render(); // all render in main canvas\r\n\r\n        return;\r\n    }\r\n    Draw.prototype.pauseMenuView = function (game,gamer,UserInterface,load) {\r\n\r\n        if(game.about.state === 'pause'){\r\n\r\n            let CTX = this.drawBuffer.ctxBuffer; // short write\r\n\r\n            CTX.restore();\r\n            CTX.save();\r\n            CTX.fillStyle = 'black';\r\n            CTX.globalAlpha = 0.9;\r\n\r\n            this.drawBuffer.ctxBuffer.drawImage(load.SpriteStorage[1],\r\n                                                this.pause.RectPause[0],this.pause.RectPause[1],\r\n                                                this.pause.RectPauseSize[0],this.pause.RectPauseSize[1]);\r\n\r\n            CTX.strokeStyle = 'gold';\r\n            CTX.globalAlpha = 0.9;\r\n            CTX.strokeRect(this.pause.RectPause[0]+10,this.pause.RectPause[1]+10,\r\n                            this.pause.RectPauseSize[0]-20,this.pause.RectPauseSize[1]-20);\r\n\r\n            CTX.fillStyle = 'yellow';\r\n            CTX.textAlign = 'center';\r\n            CTX.shadowColor = 'rgb(50,50,50)';\r\n            CTX.shadowOffsetX = 2;\r\n            CTX.shadowOffsetY = 3;\r\n            CTX.font = '50px PIXI';\r\n            CTX.fillText('PAUSE',this.pause.TextStageName[0],this.pause.TextStageName[1]);\r\n\r\n            CTX.fillStyle = 'gold';\r\n            CTX.shadowColor = 'rgb(50,80,50)';\r\n            CTX.textAlign = 'center';\r\n            CTX.shadowOffsetX = 2;\r\n            CTX.shadowOffsetY = 3;\r\n            CTX.font = '25px PIXI';\r\n            CTX.fillText('If you leave the game, all saves will be lost.',this.pause.Notification[0],\r\n                        this.pause.Notification[1]);\r\n\r\n            CTX.fillStyle = 'yellow';\r\n            CTX.shadowColor = 'brown';\r\n            CTX.textAlign = 'center';\r\n            CTX.font = '35px PIXI';\r\n            CTX.shadowOffsetX = 0;\r\n            CTX.shadowOffsetY = 0;\r\n            CTX.fillText('Throws: ' + gamer.countThrow,this.gameOver.Throw[0]-20,\r\n                        this.gameOver.Throw[1]);\r\n            CTX.fillText('Kills: ' + gamer.killCount,this.gameOver.killCount[0]-20,\r\n                        this.gameOver.killCount[1]+10);\r\n    \r\n\r\n            if (UserInterface.checkFrame(UserInterface.linki[0])) { // menu link\r\n\r\n                CTX.fillStyle = UserInterface.linki[0].selectColor;\r\n                } else {\r\n\r\n                CTX.fillStyle = UserInterface.linki[0].color;\r\n                }\r\n\r\n                CTX.shadowOffsetX = 2;\r\n                CTX.shadowOffsetY = 3;\r\n                CTX.textAlign = 'center';\r\n                CTX.font = '40px PIXI';\r\n                CTX.fillText('MENU',this.pause.Menu[0],this.pause.Menu[1]);\r\n                this.render(); // all render\r\n            } else {\r\n\r\n            this.drawBuffer.ctxBuffer.clearRect(0,0,this.settings.width,this.settings.health);\r\n        }\r\n        return;\r\n    }\r\n\r\n    Draw.prototype.DrawMenu = function (load,game,UserInterface,gamer){\r\n\r\n        let CTX = this.drawBuffer.ctxBuffer; // short write\r\n\r\n        this.menu.background = CTX.createPattern(load.SpriteStorage[3],'repeat');\r\n        CTX.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                     this.settings.width,this.settings.height);\r\n\r\n        CTX.fillStyle = this.menu.background;\r\n\r\n        CTX.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                     this.settings.width,this.settings.height);\r\n\r\n        CTX.fillStyle = 'rgb(255,215,0)';\r\n        CTX.shadowColor = 'brown';\r\n        CTX.shadowBlur = 3;\r\n        CTX.textAlign = \"center\";\r\n        CTX.textBaseline = \"middle\";\r\n        CTX.shadowOffsetX = 6;\r\n        CTX.shadowOffsetY = 7;\r\n        CTX.font = 'bold 100px PIXI';\r\n\r\n        CTX.globalAlpha = this.blink;\r\n\r\n        if ((this.frameBlink) && (this.blink > 0.5)) {\r\n\r\n            this.blink -= 0.01;\r\n\r\n        } else if (!(this.frameBlink) && (this.blink != 1)){\r\n\r\n        this.blink += 0.01;\r\n\r\n        }\r\n\r\n        (this.blink <= 0.5) && (this.frameBlink = false);\r\n        (this.blink >= 1) && (this.frameBlink = true);\r\n\r\n        CTX.fillText('ARENA',this.menu.TitleGame[0],this.menu.TitleGame[1]);\r\n        // --reset shadow--\r\n        CTX.shadowOffsetX = 0;\r\n        CTX.shadowOffsetY = 0;\r\n        CTX.globalAlpha = 1;\r\n\r\n        CTX.shadowColor = 'black';\r\n        CTX.font = '100px PIXI';\r\n\r\n        if (UserInterface.checkFrame(UserInterface.linki[1])) {\r\n\r\n            CTX.fillStyle = UserInterface.linki[1].selectColor;\r\n\r\n        } else {\r\n            CTX.fillStyle = UserInterface.linki[1].color;\r\n        }\r\n\r\n        CTX.fillText('PLAY',this.menu.play[0],this.menu.play[1]);\r\n\r\n        if (UserInterface.checkFrame(UserInterface.linki[2])) {\r\n\r\n            CTX.fillStyle = UserInterface.linki[2].selectColor;\r\n        } else {\r\n\r\n            CTX.fillStyle = UserInterface.linki[2].color;\r\n            }\r\n\r\n        CTX.fillText('RATING',this.menu.rating[0],this.menu.rating[1]);\r\n\r\n\r\n\r\n        if (this.viewMode === 'demo'){\r\n\r\n        CTX.fillStyle = 'lightblue';\r\n        CTX.font = '20px bold Aria';\r\n\r\n        // CTX.fillText(`Change orientation on landscape`,\r\n        // this.menu.TitleGame[0],25);\r\n\r\n        CTX.fillText('This is a demo game.',\r\n        this.settings.width/2,this.settings.height-120);\r\n\r\n        CTX.fillText(`Your device doesn\\'t support :(`,\r\n                this.settings.width/2,this.settings.height-100);\r\n\r\n\r\n        CTX.fillText(`Need width 760px and more for full.`,\r\n                this.settings.width/2,this.settings.height-80);\r\n\r\n        }\r\n\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'bold 14px Arial';\r\n        CTX.fillText('© 2019',this.menu.myName[0],this.menu.myName[1]);\r\n\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'bold 14px Arial';\r\n        CTX.fillText('v0.0.5',this.menu.version[0],this.menu.version[1]);\r\n    }\r\n\r\n    Draw.prototype.drawRatingList = function(load,game,UserInterface){\r\n\r\n        let CTX = this.drawBuffer.ctxBuffer; // short write\r\n        let lengthCut = load.startRecord.length; // length array records\r\n        let speedText = null; // for records text cycle\r\n        let posTxtY = null;  // for records text cycle\r\n        let length = null;  // for records text cycle\r\n\r\n        (this.view != 'mobile') && (length = (load.startRecord.length < 9) ?\r\n                                    load.startRecord.length : 9 ); // length records array\r\n\r\n        (this.view === 'mobile') && (length = (load.startRecord.length < 6) ?\r\n                                    load.startRecord.length : 6 );\r\n\r\n        RecordsY = 275; // start draw position\r\n        speedText = 32; // i\r\n\r\n        CTX.restore();\r\n        CTX.save();\r\n        CTX.textAlign = \"center\";\r\n        CTX.textBaseline = \"middle\";\r\n\r\n        CTX.fillStyle = this.menu.background;\r\n        CTX.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                    this.settings.width,this.settings.height);\r\n\r\n        CTX.fillStyle = this.menu.background;\r\n        CTX.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                    this.settings.width,this.settings.height);\r\n\r\n        CTX.fillStyle = 'rgb(255,215,0)';\r\n        CTX.shadowColor = 'brown';\r\n        CTX.shadowBlur = 3;\r\n        CTX.shadowOffsetX = 6;\r\n        CTX.shadowOffsetY = 7;\r\n        (this.view != 'mobile') ? CTX.font = 'bold 80px PIXI' : CTX.font = 'bold 60px PIXI';\r\n        (this.view === 'mobile') && (this.rating.TitleGame[1] = 70);\r\n\r\n        CTX.fillText('THE BEST',this.rating.TitleGame[0],this.menu.TitleGame[1]);\r\n        CTX.shadowOffsetX = 0;\r\n        CTX.shadowOffsetY = 0;\r\n\r\n        if (UserInterface.checkFrame(UserInterface.linki[3])) {\r\n\r\n            CTX.fillStyle = UserInterface.linki[3].selectColor;\r\n\r\n        } else {\r\n\r\n            CTX.fillStyle = UserInterface.linki[3].color;\r\n        }\r\n\r\n        (this.view != 'mobile') ? CTX.font = 'bold 50px PIXI' : CTX.font = 'bold 40px PIXI';\r\n        (this.view === 'mobile') && (this.rating.return[1] = 120);\r\n\r\n        CTX.fillText('RETURN',this.rating.return[0],this.rating.return[1]);\r\n        CTX.strokeStyle = 'yellow';\r\n        (this.view === 'mobile') && (this.rating.StrokeRectCoords[1] = 140);\r\n\r\n        CTX.strokeRect(this.rating.StrokeRectCoords[0],\r\n                       this.rating.StrokeRectCoords[1],\r\n                       this.rating.StrokeRectSize[0],\r\n                       this.rating.StrokeRectSize[1]);\r\n\r\n        CTX.fillStyle = 'black';\r\n        (this.view === 'mobile') && (this.rating.RectCoords[1] = 140);\r\n        CTX.fillRect(this.rating.RectCoords[0],this.rating.RectCoords[1],\r\n                    this.rating.RectSize[0],this.rating.RectSize[1]);\r\n\r\n\r\n        CTX.textAlign = \"left\";\r\n        CTX.font = 'bold 45px PIXI';\r\n        CTX.fillStyle = 'yellow';\r\n\r\n        (this.view != 'mobile') && (CTX.fillText('NAME',this.rating.TitleName[0],\r\n                                    this.rating.TitleName[1]));\r\n\r\n        (this.view === 'mobile') && (CTX.fillText('NAME',this.settings.width/4,\r\n                                    this.rating.TitleName[1]));\r\n\r\n\r\n        if (this.view != 'mobile' || this.viewDesktop === 'half-half') {\r\n\r\n        CTX.fillStyle = 'yellow';\r\n        CTX.fillText('POINTS',this.rating.RectSize[0]-70,this.rating.TitlePoints[1]);\r\n\r\n        }\r\n\r\n\r\n        CTX.font = 'bold 40px PIXI';\r\n        CTX.fillStyle = 'yellow';\r\n\r\n        for (let i = 0; i < length; i++){\r\n\r\n            CTX.fillText(`${i+1}. ` + load.startRecord[load.startRecord.length-(i+1)].name,\r\n                        this.rating.ratingListX[0],RecordsY);\r\n\r\n            if (this.view != 'mobile'  || this.viewDesktop === 'half-half'){\r\n\r\n            CTX.fillText(load.startRecord[load.startRecord.length-(i+1)].points,\r\n                        this.rating.RectSize[0]-50,RecordsY);\r\n            }\r\n\r\n            RecordsY += speedText;\r\n        }\r\n\r\n        CTX.textAlign = \"center\";\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'bold 14px Arial';\r\n\r\n        CTX.fillText('© 2019',this.menu.myName[0],this.menu.myName[1]);\r\n\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'bold 14px Arial';\r\n        CTX.fillText('v0.0.5',this.menu.version[0],this.menu.version[1]);\r\n    }\r\n    Draw.prototype.gameOverView = function (gamer,UserInterface,game) {\r\n\r\n        this.drawBuffer.ctxBuffer.save();\r\n        let CTX = this.drawBuffer.ctxBuffer; // short write\r\n\r\n        CTX.fillStyle = 'grey';\r\n        CTX.globalAlpha = 0.8;\r\n        CTX.fillRect(0, 0, this.settings.width, this.settings.height-75);\r\n\r\n        CTX.fillStyle = 'red';\r\n        CTX.textAlign = 'center';\r\n        CTX.font = '100px PIXI';\r\n        if(game.about.stageNumber >=20){\r\n        CTX.fillText('W I N',this.gameOver.win[0],this.gameOver.win[1]);\r\n\r\n        } else {\r\n\r\n        CTX.fillText('GAME OVER',this.gameOver.TitleCoords[0],this.gameOver.TitleCoords[1]);\r\n        }\r\n\r\n        CTX.shadowColor = 'brown';\r\n        CTX.shadowOffsetX = 2;\r\n        CTX.shadowOffsetY = 3;\r\n        CTX.font = '40px PIXI';\r\n        CTX.fillStyle = 'yellow';\r\n        CTX.shadowColor = 'brown';\r\n        CTX.fillText('Points: ' + gamer.stat.points, this.gameOver.Points[0],\r\n                    this.gameOver.Points[1]);\r\n\r\n        CTX.fillText('Throws: ' + gamer.countThrow,this.gameOver.Throw[0],\r\n                    this.gameOver.Throw[1]);\r\n\r\n        CTX.fillText('Kills: ' + gamer.killCount,this.gameOver.killCount[0],\r\n                    this.gameOver.killCount[1]);\r\n\r\n        if (UserInterface.checkFrame(UserInterface.linki[0])) {\r\n\r\n            CTX.fillStyle = UserInterface.linki[4].selectColor;\r\n\r\n            } else {\r\n\r\n            CTX.fillStyle = UserInterface.linki[4].color;\r\n            }\r\n\r\n        CTX.font = '50px PIXI';\r\n        CTX.fillText('MENU',this.gameOver.menu[0],this.gameOver.menu[1]);\r\n        this.render(); // render game over\r\n    }\r\n\r\n    Draw.prototype.building = function(load,gamer,game) {\r\n        // ---get main canvas---\r\n        this.drawBuffer.canvasBuffer = document.createElement('canvas');\r\n        this.drawBuffer.ctxBuffer = this.drawBuffer.canvasBuffer.getContext('2d');\r\n        this.drawBuffer.canvasBuffer.setAttribute('width', this.settings.width);\r\n        this.drawBuffer.canvasBuffer.setAttribute('height', this.settings.height);\r\n\r\n        let CTX = this.drawBuffer.ctxBuffer; // short write\r\n\r\n        if (this.view === 'mobile' && (this.viewMode === 'demo')){\r\n\r\n            CTX.fillStyle = 'rgb(240,230,140)';\r\n\r\n            CTX.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                         this.settings.width,this.settings.height);\r\n\r\n        } else {\r\n\r\n        CTX.drawImage(load.TextureStorage[0],\r\n                    this.playGame.spriteTextureBorder[0],this.playGame.spriteTextureBorder[1],\r\n                    this.settings.textureW,this.settings.textureH,\r\n                    this.settings.drawInX,this.settings.drawInY,\r\n                    this.settings.textureW,this.settings.textureH);\r\n\r\n        CTX.drawImage(load.TextureStorage[0],\r\n                    this.playGame.spriteTexture[0],this.playGame.spriteTexture[1],\r\n                    this.settings.textureW,this.settings.textureH,\r\n                    this.settings.drawInX,this.settings.drawInY,\r\n                    this.settings.textureW,this.settings.textureH);\r\n\r\n\r\n        //-----GATES----\r\n        // gate 1\r\n        CTX.drawImage(load.SpriteStorage[0], -14,190,85, 65,109, 0, 95, 65);\r\n        // gate 2\r\n        if ( (game.about.state === 'play-animation') || (game.about.state === 'menu') )  {\r\n            if (this.settings.openGate !== -50){\r\n                this.settings.openGate--;\r\n            }\r\n            CTX.drawImage(load.SpriteStorage[0],-14,190, 85, 65, 349, this.settings.openGate, 95, 65);\r\n        } else {\r\n            if (this.settings.openGate !== 0){\r\n                this.settings.openGate++;\r\n            }\r\n        CTX.drawImage(load.SpriteStorage[0],-14,190, 85, 65, 349,this.settings.openGate, 95, 65);\r\n        }\r\n        // gate 3\r\n        CTX.drawImage(load.SpriteStorage[0],-14,190, 85, 65, 588, 0, 95, 65);\r\n\r\n    }\r\n\r\n        // Game panel\r\n        let panel = this.drawBuffer.ctxBuffer.createLinearGradient(0, 0, 170, 0);\r\n        panel.addColorStop(0, \"rgb(105,105,105)\");\r\n        panel.addColorStop(0.5, \"rgb(128,128,128)\");\r\n        panel.addColorStop(1, \"rgb(169,169,169)\");\r\n        CTX.fillStyle = panel;\r\n        CTX.fillRect(this.playGame.gamePanelCoords[0],this.playGame.gamePanelCoords[1],\r\n                    this.playGame.gamePanelSize[0],this.playGame.gamePanelSize[1]);\r\n\r\n        CTX.strokeStyle = 'blue';\r\n        CTX.lineWidth = 5;\r\n        (this.view === 'mobile') && (this.playGame.hpBarBoorderCoords[0] = this.settings.width/4);\r\n\r\n        CTX.strokeRect(this.playGame.hpBarBoorderCoords[0],this.playGame.hpBarBoorderCoords[1],\r\n                    this.playGame.hpBarBoorderSize[0],this.playGame.hpBarBoorderSize[1]);\r\n        CTX.fillStyle = 'crimson';\r\n\r\n        if (gamer.stat.health <= 0){\r\n\r\n        CTX.fillRect(this.playGame.hpBarBoorderCoords[0]+2,this.playGame.hpBarBoorderCoords[1]+2,\r\n                     0, 20);\r\n\r\n        } else {\r\n        CTX.fillRect(this.playGame.hpBarBoorderCoords[0]+2,this.playGame.hpBarBoorderCoords[1]+2,\r\n                     gamer.stat.health, 20);\r\n        }\r\n\r\n        // HP bar\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'bold 15px PIXI';\r\n        (this.view != 'mobile') &&\r\n            CTX.fillText(gamer.stat.health + 'HP',this.playGame.hpBarSize[0],\r\n                         this.playGame.hpBarSize[1]);\r\n\r\n\r\n        // Lvl\r\n        CTX.fillStyle = 'red';\r\n        CTX.shadowColor = 'rgb(255,255,25)';\r\n        CTX.shadowOffsetX = 2;\r\n        CTX.shadowOffsetY = 3;\r\n        CTX.font = 'bold 30px PIXI';\r\n        CTX.fillText(game.about.stageNumber + ' LVL', 10, 30);\r\n        CTX.shadowOffsetX = 0;\r\n        CTX.shadowOffsetY = 0;\r\n        // Points\r\n        CTX.drawImage(load.SpriteStorage[0],\r\n                    this.playGame.PointsCoords[0],this.playGame.PointsCoords[1],\r\n                    this.playGame.PointsSize[0],this.playGame.PointsSize[1],\r\n                    this.playGame.PointsGetCoords[0],this.playGame.PointsGetCoords[1],\r\n                    this.playGame.PointsGetSize[0],this.playGame.PointsGetSize[1]);\r\n\r\n        CTX.fillStyle = 'gold';\r\n        CTX.font = 'bold 27px PIXI';\r\n        CTX.fillText(gamer.stat.points,this.playGame.PointsTextCoords[0],\r\n                     this.playGame.PointsTextCoords[1]);\r\n            \r\n        CTX.drawImage(load.SpriteStorage[2],this.playGame.pauseButton[0],\r\n                      this.playGame.pauseButton[1],20,20);\r\n\r\n        if ((game.about.state === 'play') && (this.settings.countModal === 0)){\r\n\r\n        CTX.fillStyle = 'black';\r\n        CTX.globalAlpha = '0.8';\r\n        CTX.fillRect(0,0,this.settings.width, 100);\r\n        CTX.textAlign = 'center';\r\n        CTX.fillStyle = 'white';\r\n        CTX.font = 'PIXI 30px bold';\r\n        CTX.fillText('Move with the WASD keys',this.playGame.ModalTextWASD[0],\r\n                    this.playGame.ModalTextWASD[1]);\r\n        CTX.textAlign = 'center';\r\n        CTX.fillStyle = 'lightblue';\r\n        CTX.font = 'PIXI 20px bold';\r\n        CTX.fillText('Press any keys',this.playGame.ModalPress[0],\r\n                    this.playGame.ModalPress[1]);\r\n\r\n        }\r\n\r\n        CTX.restore();\r\n        return;\r\n    }\r\n    Draw.prototype.loadingRender = function(load){\r\n\r\n        this.getCtx.ctx.fillRect(this.settings.drawInX,this.settings.drawInY,\r\n                                this.settings.width,this.settings.height);\r\n        this.getCtx.ctx.fillStyle = 'grey';\r\n        this.getCtx.ctx.textAlign = \"center\";\r\n        (this.view != 'mobile') ?  this.getCtx.ctx.font = '100px Aria bold' : this.getCtx.ctx.font = '45px Aria bold';\r\n\r\n        this.getCtx.ctx.fillText('My project',this.settings.width/2,\r\n        this.settings.height/2);\r\n\r\n    };\r\n\r\n    Draw.prototype.renderMouse = function(load,ul){\r\n \r\n        this.drawBuffer.ctxBuffer.drawImage(load.SpriteStorage[0],255,192,\r\n                                            65,65,ul.coordsMouseX-32.5,ul.coordsMouseY-32.5,65,65);\r\n        }\r\n\r\n    Draw.prototype.buildingGetNameView = function(type){\r\n\r\n        const canvas = type.getElementById('arena');\r\n\r\n        const inputName = type.createElement('input');\r\n        const buttonCancel = type.createElement('input');\r\n        const buttonSave = type.createElement('input');\r\n\r\n        const div = type.createElement('div');\r\n        const modal = type.createElement('div');\r\n        const bgModal = type.createElement('div');\r\n\r\n        modal.classList.add('modal-window');\r\n        bgModal.classList.add('background-modal');\r\n        inputName.classList.add('name');\r\n        buttonSave.classList.add('btnName');\r\n        buttonCancel.classList.add('cancelName');\r\n\r\n        div.classList.add('center');\r\n        inputName.setAttribute('type','text');\r\n        inputName.setAttribute('maxlength','11');\r\n        inputName.placeholder = 'NAME';\r\n        buttonSave.setAttribute('type','button');\r\n        buttonSave.value = 'SAVE';\r\n        buttonCancel.setAttribute('type','button');\r\n        buttonCancel.value = 'NO';\r\n\r\n        div.appendChild(inputName);\r\n        div.appendChild(buttonSave);\r\n        div.appendChild(buttonCancel);\r\n        modal.appendChild(div);\r\n        bgModal.appendChild(modal);\r\n\r\n        type.body.insertBefore(bgModal,canvas);\r\n\r\n    }\r\n\r\n    Draw.prototype.deleteGetNameView = function(type){\r\n\r\n        const modal = type.querySelector('.background-modal');\r\n        modal.remove();\r\n    }\r\n\r\n\r\n    Draw.prototype.height = function() {\r\n\r\n        if (window.screen.availHeight < 620){\r\n\r\n            this.view = 'mobile';\r\n\r\n        return window.screen.availHeight-100;\r\n        } else {\r\n\r\n            return 620;\r\n        }\r\n    }\r\n\r\n    Draw.prototype.width = function() {\r\n\r\n        if (window.screen.availWidth < 800){\r\n\r\n            ( (760 < window.screen.availWidth) && (window.screen.availWidth < 800)) &&\r\n            (this.viewDesktop ='half-half');\r\n            (window.screen.availWidth < 760) && (this.viewMode = 'demo');\r\n            this.view = 'mobile';\r\n\r\n        return window.screen.availWidth-10;\r\n\r\n        } else {\r\n\r\n            return 800;\r\n        }\r\n    }","\r\n    function GameController() {\r\n        let _that = this;\r\n        _that.count = 0;\r\n\r\n        _that.canvasLeft = null;\r\n        _that.canvasTop = null;\r\n\r\n        _that.inputState = {\r\n            UP: false,\r\n            DOWN: false,\r\n            LEFT: false,\r\n            RIGHT: false,\r\n            ESCAPE: false,\r\n        };\r\n\r\n        _that.setEvent = (location, gamer, load, game, UserInterface) => {\r\n\r\n            let canvas = document.getElementById('arena');\r\n            let inputName = document.getElementsByClassName('name')[0];\r\n\r\n            document.addEventListener('keydown', moveTrue,false);\r\n            document.addEventListener('keyup', moveFalse,false);\r\n            document.addEventListener('mousemove', movingMouse);\r\n            document.addEventListener('click', clickOnDOM,false);\r\n            location.getCanvas.canvas.addEventListener('click', clickOnCanvas,false);\r\n\r\n            function moveTrue(e) {\r\n\r\n                if (e.target.className === 'name') return 0;\r\n\r\n                if ((location.settings.countModal === 0) && (game.about.state === 'play')) {\r\n\r\n                    location.settings.countModal++;\r\n\r\n                } else if (!(game.about.state === 'play' || game.about.state === 'pause')) {\r\n\r\n                    e.preventDefault();\r\n                } else {\r\n\r\n                    if (input.isDown(\"ESCAPE\") === true) {\r\n\r\n                        game.about.state = 'play';\r\n\r\n                        return _that.setKeyState(e.which, false);\r\n                    }  else {\r\n                        return _that.setKeyState(e.which, true);\r\n                    }\r\n                }\r\n            };\r\n\r\n            function moveFalse(e) {\r\n\r\n                if  (!(game.about.state === 'play' || game.about.state === 'pause' )){\r\n\r\n                    e.preventDefault();\r\n                } else {\r\n\r\n                    if (input.isDown(\"ESCAPE\") === true) return;\r\n                    else {\r\n\r\n                        return _that.setKeyState(e.which, false);\r\n                    }\r\n                }\r\n            };\r\n\r\n            function movingMouse(e) {\r\n\r\n                // For links and bullets\r\n                if (e.target === canvas) {\r\n\r\n                    _that.canvasLeft = canvas.offsetLeft;\r\n                    _that.canvasTop = canvas.offsetTop;\r\n\r\n                    UserInterface.coordsMouseX = e.pageX - _that.canvasLeft;\r\n                    UserInterface.coordsMouseY = e.pageY - _that.canvasTop;\r\n\r\n                    UserInterface.coorddX = UserInterface.coordsMouseX - gamer.move.pos[0];\r\n                    UserInterface.coorddY = UserInterface.coordsMouseY - gamer.move.pos[1];\r\n                }\r\n            };\r\n\r\n            function clickOnCanvas(e) {\r\n\r\n                if (game.about.state === 'loading') { e.preventDefault(); return 0; }\r\n\r\n\r\n                command = UserInterface.linki; // short write\r\n\r\n                for (let i = 0; i < command.length; i++) {\r\n\r\n                    if ((UserInterface.checkFrame(command[i])) &&\r\n                        (command[i].Name === game.about.state)) {\r\n                        command[i].selectName = true;\r\n\r\n                    } else  command[i].selectName = false;\r\n                }\r\n                \r\n                (location.viewMode === 'demo') && (UserInterface.linki[1].selectName = false);\r\n\r\n                if (game.about.state === 'menu' ||\r\n                    game.about.state === 'rating' ||\r\n                    game.about.state === 'wait') {\r\n\r\n                    for (let elem in _that.inputState) {\r\n\r\n                        _that.inputState[elem] = false;\r\n                    }\r\n                } else {\r\n\r\n                    if ((input.isDown(\"ESCAPE\") === true) || (UserInterface.linki[5].selectName)) {\r\n\r\n                        return 0;\r\n                    } else {\r\n\r\n                        gamer.stat.bullets.useSkill(load, gamer, UserInterface, e);\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            function clickOnDOM(e) {\r\n\r\n                if (e.target.className === 'btnName' && inputName.value !== '') {\r\n\r\n                    getName(inputName.value, gamer);\r\n                    location.deleteGetNameView(document, e.target);\r\n                } else if (e.target.className === 'cancelName') {\r\n                    location.deleteGetNameView(document, e.target);\r\n                }\r\n\r\n            };\r\n        };\r\n\r\n        _that.setKeyState = function (keyCode, isPressed) {\r\n\r\n            switch (keyCode) {\r\n                case 65: _that.inputState.LEFT = isPressed; break;\r\n                case 87: _that.inputState.UP = isPressed; break;\r\n                case 68: _that.inputState.RIGHT = isPressed; break;\r\n                case 83: _that.inputState.DOWN = isPressed; break;\r\n                case 27: _that.inputState.ESCAPE = isPressed; break;\r\n            }\r\n        };\r\n\r\n        window.input = {\r\n\r\n            isDown: (key) => {\r\n\r\n                return _that.inputState[key];\r\n            }\r\n        };\r\n\r\n    };\r\n\r\n","//--------INIT--------//\r\n\r\n    (function () {\r\n    function main() {\r\n\r\n\r\n            let canvas = document.getElementById('arena');\r\n            canvas.classList.add('canvasInit');\r\n            const statistic = null;\r\n            let gameLoop = null;\r\n            let lastTime = null;\r\n            let now = null;\r\n            let time = null;\r\n\r\n            // Object init\r\n            const game = new Game();\r\n            const gamePlayDraw = new Draw();\r\n            const controller = new GameController();\r\n            const UserInterface = new UI();\r\n            const loader = new Loader();\r\n            const request = new Request();\r\n\r\n            !(localStorage.IP) && (request.getIP());\r\n\r\n            mainDB = new DataBase();\r\n            mainDB.updateLimit();\r\n\r\n            gamePlayDraw.getCanvas.canvas.setAttribute('width', gamePlayDraw.settings.width);\r\n            gamePlayDraw.getCanvas.canvas.setAttribute('height', gamePlayDraw.settings.height);\r\n\r\n\r\n            // links\r\n\r\n            if (gamePlayDraw.view != 'mobile'){\r\n\r\n            UserInterface.linki.push(new Links('PAUSE', 'pause', 350, 420, 100, 30));\r\n            UserInterface.linki.push(new Links('PLAY', 'menu', gamePlayDraw.menu.play[0]-85,\r\n                                                gamePlayDraw.menu.play[1]-45, 200,80));\r\n\r\n            UserInterface.linki.push(new Links('RATING', 'menu', gamePlayDraw.menu.rating[0]-120,\r\n                                                gamePlayDraw.menu.rating[1]-40, 250, 80));\r\n\r\n            UserInterface.linki.push(new Links('RETURN', 'rating', (gamePlayDraw.settings.width/2)-60,\r\n                                                110, 110, 70));\r\n\r\n            UserInterface.linki.push(new Links('MENU', 'wait', 350,\r\n                                                430, 110, 30));\r\n\r\n            UserInterface.linki.push(new Links('PAUSE-MENU', 'play', 760, \r\n                                                570, 50, 50));\r\n            } else {\r\n                UserInterface.linki.push(new Links('PAUSE', 'pause', 350, 420, 100, 30));\r\n\r\n                UserInterface.linki.push(new Links('PLAY', 'menu', gamePlayDraw.menu.play[0]-85,\r\n                                        gamePlayDraw.menu.play[1]-45, 200,80));\r\n\r\n                UserInterface.linki.push(new Links('RATING', 'menu', gamePlayDraw.menu.rating[0]-120, \r\n                                                    gamePlayDraw.menu.rating[1]-40, 250, 80));\r\n\r\n                UserInterface.linki.push(new Links('RETURN', 'rating', gamePlayDraw.rating.return[0]-40,\r\n                                                    100, 110, 70));\r\n\r\n                UserInterface.linki.push(new Links('MENU', 'wait', 350,\r\n                                                    430, 110, 30));\r\n\r\n                UserInterface.linki.push(new Links('PAUSE-MENU', 'play', 760,\r\n                                                    570, 50, 50));\r\n            }\r\n\r\n\r\n            loader.loading('Image','img/texture.png','texture');\r\n            loader.loading('Image','img/sheet_objects_heroes.png','sprite');\r\n            loader.loading('Image','img/menu_800x600.jpg','sprite');\r\n            loader.loading('Image','img/pause.png','sprite');\r\n            loader.loading('Image','img/box_background.png','sprite');\r\n            loader.loading('Image','img/box.png','sprite');\r\n            loader.loading('Image','img/globe.png','sprite');\r\n\r\n            loader.loading('Audio','audio/main.mp3');\r\n            loader.loading('Audio','audio/shot.mp3');\r\n            loader.loading('Audio','audio/Fly_A_Kite.mp3');\r\n            loader.loading('Audio','audio/money.wav');\r\n            loader.loading('Audio','audio/eat.wav');\r\n            loader.loading('Audio','audio/damage.wav');\r\n            loader.loading('Audio','audio/death_boss.wav');\r\n            loader.loading('Audio','audio/death-bat.mp3');\r\n            loader.loading('Audio','audio/death-bossExtra.wav');\r\n            loader.loading('Audio','audio/gameOver.wav');\r\n            loader.loading('Audio','audio/lvl.mp3');\r\n            loader.loading('Audio','audio/lvlUP.wav');\r\n            loader.loading('Audio','audio/lvlUP.wav');\r\n            loader.loading('Audio','audio/select.wav');\r\n\r\n            // loading\r\n            gamePlayDraw.loadingRender(loader);\r\n\r\n\r\n            // enemy and player\r\n            let enemy = new Enemy();\r\n            let player = new Player(loader, gamePlayDraw);\r\n\r\n\r\n                loader.enemy.forEach(() => {\r\n                    // -----start move-----\r\n                    loader.enemy[i].bull.pos[0] = loader.enemy[i].move.pos[0];\r\n                    loader.enemy[i].bull.pos[1] = loader.enemy[i].move.pos[1];\r\n                    loader.enemy[i].enemySpeed *= getRandomPull();\r\n                });\r\n\r\n\r\n            function linkers(loader, player) {\r\n\r\n\r\n\r\n            if (UserInterface.linki[1].selectName){\r\n\r\n                loader.SoundsStorage[13].play();\r\n                game.startGameAnimation(loader, player,UserInterface.linki[1]);\r\n            }\r\n                if (UserInterface.linki[2].selectName){\r\n\r\n                    loader.SoundsStorage[13].play();\r\n                    game.ratingGame(UserInterface.linki[2]);\r\n                }\r\n\r\n                if (UserInterface.linki[3].selectName){\r\n\r\n                    loader.SoundsStorage[13].play();\r\n                    game.mainMenu(UserInterface.linki[3]);\r\n                }\r\n\r\n                if (UserInterface.linki[4].selectName){\r\n\r\n                    loader.SoundsStorage[13].play();\r\n                    game.mainMenu(UserInterface.linki[4]);\r\n                }\r\n                \r\n                if ((gamePlayDraw.viewMode != 'demo') && UserInterface.linki[5].selectName) {\r\n\r\n                    loader.SoundsStorage[13].play();\r\n                    game.pause(UserInterface.linki[5]);\r\n                }\r\n                \r\n                }\r\n\r\n\r\n            function menu(loader, player) {\r\n\r\n                if (game.about.state === 'menu') {\r\n\r\n                    player.setHealth(200);\r\n                    game.setRequstCount(0);\r\n                    loader.SoundsStorage[2].pause();\r\n                    loader.SoundsStorage[2].currentTime = 0;\r\n                }\r\n            }\r\n\r\n            function gameplay(loader, player, game) {\r\n\r\n                if (game.about.state === 'play-animation') {\r\n\r\n                    gamePlayDraw.building(loader, player, game);\r\n                }\r\n                if ((game.about.state === 'play') && !(loader.enemy.length)) {\r\n\r\n                    loader.SoundsStorage[10].currentTime = 0;\r\n                    loader.SoundsStorage[10].play();\r\n\r\n                    (game.about.stageNumber >= 20) && (player.setHealth(0));\r\n\r\n\r\n                    if (game.about.stageNumber >= 10) {\r\n\r\n                        game.about.stageNumber++;\r\n                        game.about.stageBossCount++;\r\n                        game.about.stageExtraBossCount++;\r\n\r\n                    } else if (game.about.stageNumber >= 7) {\r\n\r\n                        game.about.stageNumber++;\r\n                        game.about.stageBossCount++;\r\n                    }\r\n\r\n                    (game.about.stageNumber < 7) && (game.about.stageNumber++);\r\n\r\n                    game.spawnAndLvling(game, loader, enemy, game.about.stageNumber);\r\n                };\r\n            }\r\n\r\n            function buildTexture(game, loader, player) {\r\n\r\n                if ((game.about.state === 'play') ||\r\n                    (game.about.state === 'wait')) {\r\n\r\n                    (game.about.state === 'play') && (calculate( player, game));\r\n                    gamePlayDraw.building(loader, player, game);\r\n                }\r\n            }\r\n\r\n            function pauseCheck(game,controller){ \r\n                if ((game.about.state === 'pause') && !(input.isDown('ESCAPE'))){\r\n\r\n                    controller.inputState.ESCAPE = true;\r\n            }\r\n            }\r\n\r\n            function death(game, player,loader) {\r\n\r\n                if ((game.about.state === 'wait') &&\r\n                    (game.about.requstCount === 0) &&\r\n                    (player.stat.health <= 0)) {\r\n\r\n                    (localStorage.name) && (player.stat.gamerName = localStorage.name);\r\n\r\n                    !(localStorage.name) && (player.stat.gamerName = 'player' +\r\n                                            (Math.random().toFixed(3)).toString());\r\n\r\n                    let id = '_id'+loader.startRecord.length;\r\n\r\n                    const statistic = {\r\n\r\n                        result: {\r\n                            name: player.stat.gamerName,\r\n                            points: player.stat.points,\r\n                            id: id.slice(1,id.length),\r\n                            ip: localStorage.IP,\r\n                        }\r\n                    }\r\n\r\n                    localStorage.setItem(\"result\", JSON.stringify(statistic));\r\n\r\n                    mainDB.updateUserData(localStorage.IP,id,player.stat.gamerName,\r\n                                          player.stat.points,loader);\r\n\r\n                    game.about.requstCount++;\r\n                }\r\n            }\r\n\r\n            if (!localStorage.name)\r\n                gamePlayDraw.buildingGetNameView(document);\r\n\r\n\r\n            let timer = setTimeout(() => {\r\n                game.about.state = 'menu';\r\n                gameLoop = requestAnimationFrame(loop);\r\n            }, 3000);\r\n\r\n            controller.setEvent(gamePlayDraw, player, loader, game, UserInterface);\r\n            gamePlayDraw.building(loader, player, game);\r\n\r\n            mainDB.getUserData(loader);\r\n\r\n            function loop() {\r\n\r\n                now = Date.now();\r\n                time = Math.min(0.05,(now - lastTime) / 1000.0);\r\n\r\n                linkers(loader, player, time);\r\n                (game.about.state != 'play') && (menu(loader, player));\r\n                gameplay(loader, player, game);\r\n                update(time, player, loader, game, UserInterface.linki);\r\n                pauseCheck(game,controller);\r\n                buildTexture(game, loader, player);\r\n                gamePlayDraw.renders(player, loader, game, UserInterface);\r\n                (game.about.state === 'play') && (death(game,player,loader));  //, request\r\n\r\n                lastTime = now;\r\n                requestAnimationFrame(loop);\r\n            }\r\n        } // main()\r\n        return application = {\r\n            init: main\r\n        }\r\n    })();\r\n\r\n    application.init();"]}